#!/usr/bin/env bash

# avr-libcpp
#
# Copyright 2020-2024, Andrew Countryman <apcountryman@gmail.com> and the avr-libcpp
# contributors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
# file except in compliance with the License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the specific language governing
# permissions and limitations under the License.

# Description: Git hooks install script.

function error()
{
    local -r message="$1"

    ( >&2 echo "$mnemonic: $message" )
}

function abort()
{
    if [[ "$#" -gt 0 ]]; then
        local -r message="$1"

        error "$message, aborting"
    fi

    exit 1
}

function display_help_text()
{
    echo "NAME"
    echo "    $mnemonic - Install the avr-libcpp repository's Git hooks."
    echo "SYNOPSIS"
    echo "    $mnemonic --help"
    echo "    $mnemonic --version"
    echo "    $mnemonic --all"
    echo "    $mnemonic [<hooks>]"
    echo "OPTIONS"
    echo "    --all"
    echo "        Install all supported hooks."
    echo "    --help"
    echo "        Display this help text."
    echo "    --version"
    echo "        Display the version of this script."
    echo "    <hooks>"
    echo "        The whitespace separated list of hooks to install. The following hooks"
    echo "        are supported:"

    for hook in "${supported_hooks[@]}"; do
        echo "            $hook"
    done

    echo "EXAMPLES"
    echo "    $mnemonic --help"
    echo "    $mnemonic --version"
    echo "    $mnemonic --all"
    echo "    $mnemonic ${supported_hooks[*]}"
}

function display_version()
{
    echo "$mnemonic, version $version"
}

function valid_hook()
{
    local -r hook="$1"

    for supported_hook in "${supported_hooks[@]}"; do
        if [[ "$hook" == "$supported_hook" ]]; then
            return 0
        fi
    done

    return 1
}

function validate_hooks()
{
    for hook in "${selected_hooks[@]}"; do
        if ! valid_hook "$hook"; then
            abort "'$hook' is not a supported hook"
        fi
    done
}

function install_hooks()
{
    for hook in "${selected_hooks[@]}"; do
        rm -f "$repository/.git/hooks/$hook"

        if ! ln -s "$hooks/$hook" "$repository/.git/hooks/$hook" > "/dev/null"; then
            abort "'$hook' installation failure"
        fi
    done
}

function main()
{
    local -r script=$( readlink -f "$0" )
    local -r mnemonic=$( basename "$script" )
    local -r hooks=$( dirname "$script" )
    local -r repository=$( readlink -f "$hooks/../.." )
    local -r version=$( git -C "$repository" describe --match=none --always --dirty --broken )

    local supported_hooks; mapfile -t supported_hooks < <( git -C "$repository" ls-files 'git/hooks/' ':!:git/hooks/install' | xargs -r -d '\n' -I '{}' find "$repository/{}" -executable -printf '%f\n' ); readonly supported_hooks

    local selected_hooks=()

    while [[ "$#" -gt 0 ]]; do
        local argument="$1"; shift

        case "$argument" in
            --all)
                selected_hooks=( "${supported_hooks[@]}" )
                break
                ;;
            --help)
                display_help_text
                exit
                ;;
            --version)
                display_version
                exit
                ;;
            --*)
                ;&
            -*)
                abort "'$argument' is not a supported option"
                ;;
            *)
                selected_hooks+=( "$argument" )
                ;;
        esac
    done

    readonly selected_hooks

    validate_hooks
    install_hooks
}

main "$@"
