#!/usr/bin/env bash

# avr-libcpp
#
# Copyright 2020-2021, Andrew Countryman <apcountryman@gmail.com> and the avr-libcpp
# contributors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
# file except in compliance with the License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the specific language governing
# permissions and limitations under the License.

# File: git/hooks/pre-commit
# Description: Git pre-commit hook script for the avr-libcpp repository.

function message()
{
    local -r content="$1"

    echo -n "$mnemonic: $content"
}

function errors_found()
{
    echo "error(s) found"
}

function error()
{
    local -r message="$1"

    ( >&2 echo "$mnemonic: $message" )
}

function abort()
{
    if [[ "$#" -gt 0 ]]; then
        local -r message="$1"

        error "$message, aborting"
    fi

    exit 1
}

function display_help_text()
{
    echo "NAME"
    echo "    $mnemonic - Ensure:"
    echo "        - Filenames are portable"
    echo "        - No whitespace errors are present"
    echo "        - No script errors are present"
    echo "        - No build errors are present"
    echo "SYNOPSIS"
    echo "    $mnemonic --help"
    echo "    $mnemonic --version"
    echo "    $mnemonic [--jobs <jobs>]"
    echo "OPTIONS"
    echo "    --help"
    echo "        Display this help text."
    echo "    --jobs <jobs>"
    echo "        Specify the number of build jobs to use when building. If the number of"
    echo "        jobs is not specified, 'nproc - 1' jobs will be used."
    echo "    --version"
    echo "        Display the version of this script."
    echo "EXAMPLES"
    echo "    $mnemonic --help"
    echo "    $mnemonic --version"
    echo "    $mnemonic"
    echo "    $mnemonic --jobs 1"
}

function display_version()
{
    echo "$mnemonic, version $version"
}

function ensure_filenames_are_portable()
{
    message "checking for non-portable (non-ASCII) filenames ... "

    if [[ $( git -C "$repository" diff --cached --name-only --diff-filter=A -z "$against" | LC_ALL=C tr -d '[ -~]\0' | wc -c ) != 0 ]]; then
        errors_found
        error "aborting commit due to non-portable (non-ASCII) filename(s)"
        abort
    fi

    echo "none"
}

function ensure_no_whitespace_errors_are_present()
{
    message "checking for whitespace errors .................... "

    if ! git -C "$repository" diff-index --check --cached "$against" -- > "/dev/null" 2>&1; then
        errors_found
        error "aborting commit due to whitespace error(s), listed below"
        git -C "$repository" diff-index --check --cached "$against" --
        abort
    fi

    echo "none"
}

function ensure_no_script_errors_are_present()
{
    message "checking for script errors ........................ "

    local scripts; mapfile -t scripts < <( git -C "$repository" ls-files ':!:cmake/modules/' ':!:lizard/' ':!:toolchain-avr-gcc/' | xargs -r -d '\n' -I '{}' find "$repository/{}" -executable ); readonly scripts

    if ! shellcheck "${scripts[@]}" > "/dev/null" 2>&1; then
        errors_found
        error "aborting commit due to script error(s), listed below"
        shellcheck "${scripts[@]}"
        abort
    fi

    echo "none"
}

function ensure_no_build_errors_are_present()
{
    local -r build_type="$1"
    local -r ellipsis="$2"

    message "checking for ($build_type) build errors $ellipsis "

    local -r toolchain_file="$repository/toolchain-avr-gcc/toolchain.cmake"
    local -r build_directory="$repository/build/$build_type"
    local -r build_configuration="$repository/configuration/CMakeLists.txt.$build_type"

    if [[ ! -d "$build_directory" ]]; then
        if ! cmake -DCMAKE_TOOLCHAIN_FILE="$toolchain_file" -C "$build_configuration" -S "$repository" -B "$build_directory" > "/dev/null" 2>&1; then
            errors_found
            error "aborting commit due to ($build_type) build CMake initialization error(s), listed below"
            rm -rf "$build_directory"
            cmake -DCMAKE_TOOLCHAIN_FILE="$toolchain_file" -C "$build_configuration" -S "$repository" -B "$build_directory"
            abort
        fi
    fi

    if ! cmake -C "$build_configuration" "$build_directory" > "/dev/null" 2>&1; then
        errors_found
        error "aborting commit due to ($build_type) build CMake configuration error(s), listed below"
        cmake -C "$build_configuration" "$build_directory"
        abort
    fi

    if ! cmake --build "$build_directory" -j "$build_jobs" > "/dev/null" 2>&1; then
        errors_found
        error "aborting commit due to ($build_type) build CMake build error(s), listed below"
        cmake --build "$build_directory" -j "$build_jobs"
        abort
    fi

    echo "none"
}

function ensure_no_atmega2560_build_errors_are_present()
{
    local -r build_type="atmega2560"
    local -r ellipsis="............"

    ensure_no_build_errors_are_present "$build_type" "$ellipsis"
}

function ensure_no_atmega328p_build_errors_are_present()
{
    local -r build_type="atmega328p"
    local -r ellipsis="............"

    ensure_no_build_errors_are_present "$build_type" "$ellipsis"
}

function main()
{
    local -r script=$( readlink -f "$0" )
    local -r mnemonic=$( basename "$script" )
    local -r hooks=$( dirname "$script" )
    local -r repository=$( readlink -f "$hooks/../.." )
    local -r version=$( git -C "$repository" describe --match=none --always --dirty --broken )

    while [[ "$#" -gt 0 ]]; do
        local argument="$1"; shift

        case "$argument" in
            --help)
                display_help_text
                exit
                ;;
            --version)
                display_version
                exit
                ;;
            --jobs)
                if [[ -n "$build_jobs" ]]; then
                    abort "build job count already specified"
                fi

                if [[ "$#" -le 0 ]]; then
                    abort "build job count not specified"
                fi

                local -r build_jobs="$1"; shift
                ;;
            --*)
                ;&
            -*)
                abort "'$argument' is not a supported option"
                ;;
            *)
                abort "'$argument' is not a valid argument"
                ;;
        esac
    done

    if git -C "$repository" rev-parse --verify HEAD > "/dev/null" 2>&1; then
        local -r against=HEAD
    else
        local -r against=$( git hash-object -t tree "/dev/null" )
    fi

    if [[ -z "$build_jobs" ]]; then
        local -r build_jobs=$(( $( nproc ) - 1 ))
    fi

    ensure_filenames_are_portable
    ensure_no_whitespace_errors_are_present
    ensure_no_script_errors_are_present
    ensure_no_atmega2560_build_errors_are_present
    ensure_no_atmega328p_build_errors_are_present
}

main "$@"
